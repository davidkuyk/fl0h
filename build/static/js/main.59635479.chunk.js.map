{"version":3,"sources":["Components/task.component.js","Components/edit-task.component.js","Components/tasks-list.component.js","Components/loading.js","Components/navbar.component.js","Components/new-create-task.component.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","useState","task","description","Date","distance","date","substring","category","onClick","currentMode","currentRowKey","_id","editModeChange","deleteTask","EditTask","require","setDescription","toDateString","setDate","setCategory","setDistance","type","required","className","value","onChange","e","target","selected","console","log","dt2","d2F","getFullYear","getMonth","getDate","dt1","d1F","currdistance","Math","floor","ceil","abs","onChangeDate","preventDefault","axios","post","then","res","data","catch","err","response","request","_response","window","location","onSubmit","style","marginLeft","TasksList","status","rowKey","inEditMode","setInEditMode","id","delete","setTasks","tasks","filter","el","class","map","currenttask","Loading","Navbar","to","CreateTask","dash","App","loading","setLoading","useEffect","get","orderedTasks","orderBy","setTimeout","path","exact","render","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59635479.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Task = props => {\n\n  const [description, setDescription] = useState(props.task.description);\n  const [date, setDate] = useState(new Date());\n  const [category, setCategory] = useState('None');\n  const [distance, setDistance] = useState('today');\n\n  const onEdit = (currentMode, currentRowKey) => {\n    props.editModeChange(currentMode, currentRowKey);\n    }\n\n    \n      return (\n      <tr>\n        {/* Description */}\n        <td>{props.task.description}</td>\n        {/* Distance */}\n        <td>{props.distance}</td>\n        {/* Date */}\n        <td>{props.task.date.substring(0,10)}</td>\n        {/* Category */}\n        <td>{props.task.category}</td>\n        {/* Actions */}\n        <td>\n          {<>\n            <button onClick={() => { \n              onEdit(true, props.task._id)\n            }}>edit</button> \n            <button onClick={() => { props.deleteTask(props.task._id)}}>delete</button>\n          </> }\n        </td>\n      </tr>\n    )}\n\nexport default Task;","import React, { useState} from 'react';\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nlet dash = require('lodash');\n\nconst EditTask = props => {\n\n  const [description, setDescription] = useState(props.task.description);\n  const [date, setDate] = useState(new Date(new Date((props.task.date)).toDateString()));\n  const [category, setCategory] = useState(props.task.category);\n  const [distance, setDistance] = useState('today');\n  \n  \n    const onChangeDescription = (e) => {\n      setDescription(e.target.value)\n    }\n\n    const onChangeDate = (date) => {\n      console.log(date);\n      const dt2 = new Date(date);\n        const d2F = new Date(dt2.getFullYear() + '-' + (dt2.getMonth() + 1) + '-' + dt2.getDate())\n        const dt1 = new Date();\n        const d1F = new Date(dt1.getFullYear() + '-' + (dt1.getMonth() + 1) + '-' + dt1.getDate())\n        let currdistance = Math.floor((d2F - d1F)) / (1000 * 60 * 60 * 24);\n        if (currdistance == 1) { currdistance = '1 day until'}\n        else if (currdistance > 1) { currdistance = Math.ceil(currdistance) + ' days until'}\n        else if (currdistance == -1) { currdistance = '1 day ago'}\n        else if (currdistance < -1) { currdistance = Math.ceil(Math.abs(currdistance)) + ' days ago'}\n        else { currdistance = 'today'}\n        setDate(d2F);\n        setDistance(currdistance);\n      }\n\n    const onChangeCategory = (e) => {\n      setCategory(e.target.value)\n    }\n\n    const onCancel = () => {\n        props.editModeChange(false, null);\n    }\n\n    const onSubmit = (e) => {\n      e.preventDefault();\n\n      const task = {\n        description: description,\n        date: date,\n        category: category\n      }\n\n      axios.post('/tasks/update/'+props.task._id, task)\n        .then(res => console.log(res.data))\n        .catch(err => {\n          console.log(err.response.request._response);\n        });\n\n      window.location = '/';\n    }      \n      return (\n      <tr>\n        {/* Description */}\n        <td>\n          <input type='text'\n          required\n          className='form-control'\n          value={description}\n          onChange={onChangeDescription}\n          />\n        </td>\n        {/* Distance */}\n        <td>\n          <div className='form-control'>\n            {props.distance ? props.distance : \"today\"}\n          </div>\n        </td>\n        {/* Date */}\n        <td>\n          <div>\n            <DatePicker\n              selected={date}\n              onChange={(date) => onChangeDate(date)}\n              />\n          </div>\n        </td>\n        {/* Category */}\n        <td>\n          <input type='text'\n            required\n            className='form-control'\n            value={category}\n            onChange={onChangeCategory}\n            />\n        </td>\n        {/* Actions */}\n        <td>\n            <>\n            <button\n            className={\"btn-success\"}\n            onClick={(e) => onSubmit(e)}\n        >\n            save\n        </button>\n\n        <button\n            className={\"btn-secondary\"}\n            style={{marginLeft: 8}}\n            onClick={() => onCancel()}\n        >\n            cancel\n        </button>\n        </>\n        </td>\n      </tr>\n    )}\n\nexport default EditTask;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Task from './task.component.js';\nimport EditTask from './edit-task.component.js';\n\nconst TasksList = (props) => {\n\n    const [inEditMode, setInEditMode] = useState({\n      status: true,\n      rowKey: null\n    });\n\n    const editModeChange = (currentMode, currentRowKey) => {\n      setInEditMode({status: currentMode, rowKey: currentRowKey})\n    }\n\n    const deleteTask = (id) => {\n          axios.delete('/tasks/'+id)\n            .then(res => console.log(res.data));\n          props.setTasks({tasks: props.tasks.tasks.filter(el => el._id !== id)})\n        }\n\n    const theList = () => {\n        return props.tasks.tasks.map(currenttask => {\n          const dt2 = new Date(currenttask.date);\n          const d2F = new Date(dt2.toDateString())\n          //console.log('d2F ', d2F)\n          const dt1 = new Date();\n          //console.log('dt1 ', dt1)\n          const d1F = new Date(dt1.toDateString())\n          //console.log('d1F ', d1F)\n          let distance = Math.floor((d2F - d1F)) / (1000 * 60 * 60 * 24);\n          //console.log('Math.floor(d2F-d1F) ', Math.floor((d2F - d1F)))\n          // console.log('distance ', distance)\n          if (distance == 1) { distance = '1 day until'}\n          else if (distance > 1) { distance = Math.ceil(distance) + ' days until'}\n          else if (distance == -1) { distance = '1 day ago'}\n          else if (distance < -1) { distance = Math.ceil(Math.abs(distance)) + ' days ago'}\n          else { \n              distance = 'today'\n            }\n          if (inEditMode.status && inEditMode.rowKey === currenttask._id) {\n            return <EditTask task={currenttask} deleteTask={deleteTask} key={currenttask._id} distance={distance} editModeChange={editModeChange} />;\n          } else {\n            return <Task task={currenttask} deleteTask={deleteTask} key={currenttask._id} distance={distance} editModeChange={editModeChange}/>;\n          }\n          \n        })\n      \n    }\n        \n      return (\n        <div className='tableWrapper'>\n          <form class=\"newTask\">\n            <table className='table'>\n              <thead className='thead-dark'>\n                <tr> \n                  <th>Description</th>\n                  <th>Distance</th>\n                  <th>Date</th>\n                  <th>Category</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                { theList() }\n              </tbody>\n            </table>\n          </form>\n        </div>\n      );\n}\n\nexport default TasksList;","import React from 'react';\nimport '../style.css';\n\nconst Loading = () => {\n    return <div class='water'></div>\n};\n\nexport default Loading;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => (\n  <nav className='navbar navbar-dark bg-dark navbar-expand-lg'>\n      <Link to='/' className='navbar-brand'>fl0h</Link>\n      <div className='collapse navbar-collapse'>\n          <ul className='navbar-nav mr-auto'>\n          </ul>\n      </div>\n  </nav>\n);\n\nexport default Navbar;","import React, { Component, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst CreateTask = () => {\n\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState(new Date());\n  const [category, setCategory] = useState('None');\n  const [distance, setDistance] = useState('today');\n\n\n  const onChangeDescription = (e) => {\n      setDescription(e.target.value)\n    };\n\n  const onChangeDate = (date) => {\n      const dt2 = new Date(date);\n      const d2F = new Date(dt2.getFullYear() + '-' + (dt2.getMonth() + 1) + '-' + dt2.getDate())\n      const dt1 = new Date();\n      const d1F = new Date(dt1.getFullYear() + '-' + (dt1.getMonth() + 1) + '-' + dt1.getDate())\n      let currdistance = Math.floor((d2F - d1F)) / (1000 * 60 * 60 * 24);\n      if (currdistance == 1) { currdistance = '1 day until'}\n      else if (currdistance > 1) { currdistance = Math.ceil(currdistance) + ' days until'}\n      else if (currdistance == -1) { currdistance = '1 day ago'}\n      else if (currdistance < -1) { currdistance = Math.ceil(Math.abs(currdistance)) + ' days ago'}\n      else { currdistance = 'today'}\n      setDate(d2F);\n      setDistance(currdistance);\n    };\n\n  const onChangeCategory = (e) => {\n      setCategory(e.target.value)\n    };\n\n  const onSubmit = (e) => {\n      e.preventDefault();\n\n      const task = {\n        description: description,\n        date: date,\n        category: category\n      }\n\n      console.log('task date on submit: ' + task.date)\n\n      axios.post('/tasks/add', task)\n        .then(res => console.log(res.data))\n        .catch(err => {\n          console.log(err.response.request._response);\n        });\n\n      window.location = '/';\n    }\n\n    return (\n          <div>\n          <form class=\"newTask\" onSubmit={onSubmit}>\n            <table>\n              <tbody>\n              <tr>\n                <td>\n            {/* Description */}\n              <input type='text'\n                required\n                className='form-control'\n                value={description}\n                onChange={onChangeDescription}\n                />\n            </td>\n            <td>\n            {/* Distance */}\n              <div className='form-control'>\n                {distance ? distance : \"today\"}\n              </div>\n            </td>\n            <td>\n            {/* Date */}\n              <div>\n                <DatePicker\n                  selected={date}\n                  onChange={date => onChangeDate(date)}\n                  />\n              </div>\n            </td>\n            <td>\n            {/* Category */}\n              <input type='text'\n                required\n                className='form-control'\n                value={category}\n                onChange={onChangeCategory}\n                />\n            </td>\n            <td>\n            {/* Actions */}\n              <input type='submit' value='add' className='btn btn-primary' />\n            </td>\n            </tr>\n            </tbody>\n            </table>\n          </form>\n        </div>\n    )\n}\n\nexport default CreateTask;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './style.css';\nimport axios from 'axios';\nimport TasksList from './Components/tasks-list.component';\nimport Loading from './Components/loading.js'\nimport Navbar from './Components/navbar.component';\nimport EditTask from './Components/edit-task.component';\nimport CreateTask from './Components/new-create-task.component';\nlet dash = require('lodash');\n\nfunction App() {\n\n  const [tasks, setTasks] = useState({tasks: []});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n      axios.get('/tasks/')\n        .then(response => {\n          const orderedTasks = dash.orderBy(response.data, ['date'], 'asc');\n          setTasks({tasks: orderedTasks});\n        })\n        .then(() => {\n          setTimeout(() => {\n            setLoading(false);\n          }, 2000)   \n        })\n        .catch((err) => {\n          console.log(err);\n        })\n    }, []);\n\n  if (loading) {\n    return (\n      // <h1>Loading...</h1>\n      <Loading />\n    );\n  } else {\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Router>\n          <div className='container'>\n            <Navbar />\n            <CreateTask />\n            <Route path='/' exact render={() => (<TasksList tasks={tasks} setTasks={setTasks} component={TasksList} />)} />\n            <Route path='/edit/:id' component={EditTask} />\n            </div>\n        </Router>\n      </header>\n    </div>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change unregister() to register() below. Note this comes with some pitfalls. Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}