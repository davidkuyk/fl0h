{"version":3,"sources":["Components/tasks-list.component.js","Components/navbar.component.js","Components/edit-task.component.js","Components/new-create-task.component.js","App.js","serviceWorker.js","index.js"],"names":["dash","require","TasksList","useState","tasks","setTasks","console","log","Task","props","task","description","distance","date","substring","category","to","_id","onClick","deleteTask","id","axios","delete","then","res","data","filter","el","useEffect","get","response","orderedTasks","orderBy","catch","err","className","map","currenttask","dt2","Date","d2F","toDateString","dt1","d1F","Math","floor","ceil","abs","Navbar","EditTask","setDescription","setDate","setCategory","setDistance","useParams","class","onSubmit","e","preventDefault","post","request","_response","window","location","type","required","value","onChange","target","selected","getFullYear","getMonth","getDate","currdistance","CreateTask","onChangeDate","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wLAGIA,EAAOC,EAAQ,IAgFJC,EA9EG,WAAO,IAAD,EAEMC,mBAAS,CAACC,MAAO,KAFvB,mBAEbA,EAFa,KAENC,EAFM,KAIpBC,QAAQC,IAAIH,GAEZ,IAAMI,EAAO,SAAAC,GAAK,OAChB,+BACE,6BAAKA,EAAMC,KAAKC,cAChB,6BAAKF,EAAMG,WACX,6BAAKH,EAAMC,KAAKG,KAAKC,UAAU,EAAE,MACjC,6BAAKL,EAAMC,KAAKK,WAChB,+BACE,cAAC,IAAD,CAAMC,GAAI,SAASP,EAAMC,KAAKO,IAA9B,kBADF,IACiD,wBAAQC,QAAS,WAAQT,EAAMU,WAAWV,EAAMC,KAAKO,MAArD,2BAK/CE,EAAa,SAACC,GACdC,IAAMC,OAAO,UAAUF,GACpBG,MAAK,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,EAAIC,SAC/BpB,EAAS,CAACD,MAAOA,EAAMA,MAAMsB,QAAO,SAAAC,GAAE,OAAIA,EAAGV,MAAQG,QAqCvD,OAXJQ,qBAAU,WACRP,IAAMQ,IAAI,WACPN,MAAK,SAAAO,GACJ,IAAMC,EAAe/B,EAAKgC,QAAQF,EAASL,KAAM,CAAC,QAAS,OAC3DpB,EAAS,CAACD,MAAO2B,OAElBE,OAAM,SAACC,GACN5B,QAAQC,IAAI2B,QAEf,IAGG,qBAAKC,UAAU,eAAf,SACE,wBAAOA,UAAU,QAAjB,UACE,uBAAOA,UAAU,aAAjB,SACE,+BACE,6CACA,0CACA,sCACA,0CACA,8CAGJ,gCA7CD/B,EAAMA,MAAMgC,KAAI,SAAAC,GACnB,IAAMC,EAAM,IAAIC,KAAKF,EAAYxB,MAC3B2B,EAAM,IAAID,KAAKD,EAAIG,gBACzBnC,QAAQC,IAAI,OAAQiC,GACpB,IAAME,EAAM,IAAIH,KAChBjC,QAAQC,IAAI,OAAQmC,GACpB,IAAMC,EAAM,IAAIJ,KAAKG,EAAID,gBACzBnC,QAAQC,IAAI,OAAQoC,GACpB,IAAI/B,EAAWgC,KAAKC,MAAOL,EAAMG,GAAlB,MAUf,OATArC,QAAQC,IAAI,uBAAwBqC,KAAKC,MAAOL,EAAMG,IACtDrC,QAAQC,IAAI,YAAaK,GACJA,EAAL,GAAZA,EAA4B,cACvBA,EAAW,EAAgBgC,KAAKE,KAAKlC,GAAY,eACpC,GAAbA,EAA6B,YAC7BA,GAAY,EAAgBgC,KAAKE,KAAKF,KAAKG,IAAInC,IAAa,YAEtD,QAER,cAACJ,EAAD,CAAME,KAAM2B,EAAalB,WAAYA,EAAkCP,SAAUA,GAA3ByB,EAAYpB,gBCnCpE+B,EAVA,kBACb,sBAAKb,UAAU,8CAAf,UACI,cAAC,IAAD,CAAMnB,GAAG,IAAImB,UAAU,eAAvB,kBACA,qBAAKA,UAAU,2BAAf,SACI,oBAAIA,UAAU,6B,iBCgHTc,G,MAhHE,WAAO,IAAD,EAEiB9C,mBAAS,IAF1B,mBAEdQ,EAFc,KAEDuC,EAFC,OAGG/C,mBAAS,IAAIoC,MAHhB,mBAGd1B,EAHc,KAGRsC,EAHQ,OAIWhD,mBAAS,QAJpB,mBAIdY,EAJc,KAIJqC,EAJI,OAKWjD,mBAAS,SALpB,mBAKdS,EALc,KAKJyC,EALI,KAMbjC,EAAOkC,cAAPlC,GAERQ,qBAAU,WACRP,IAAMQ,IAAI,UAAUT,GACnBG,MAAK,SAAAO,GACJoB,EAAepB,EAASL,KAAKd,aAC7BwC,EAAQ,IAAIZ,KAAKT,EAASL,KAAKZ,OAC/BuC,EAAYtB,EAASL,KAAKV,aAE3BkB,OAAM,SAAAC,GACL5B,QAAQC,IAAI2B,QAEb,IA2CD,OACE,8BACE,sBAAMqB,MAAM,UAAUC,SApBT,SAACC,GAChBA,EAAEC,iBAEF,IAAMhD,EAAO,CACXC,YAAaA,EACbE,KAAMA,EACNE,SAAUA,GAGZM,IAAMsC,KAAK,iBAAiBvC,EAAIV,GAC7Ba,MAAK,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,EAAIC,SAC5BQ,OAAM,SAAAC,GACL5B,QAAQC,IAAI2B,EAAIJ,SAAS8B,QAAQC,cAGrCC,OAAOC,SAAW,KAKhB,SACE,gCACE,gCACE,+BACE,6BAEE,uBAAOC,KAAK,OACZC,UAAQ,EACR9B,UAAU,eACV+B,MAAOvD,EACPwD,SArDc,SAACV,GAC3BP,EAAeO,EAAEW,OAAOF,YAuDd,6BAEE,qBAAK/B,UAAU,eAAf,SACGvB,GAAsB,YAG3B,6BAEA,8BACE,cAAC,IAAD,CACEyD,SAAUxD,EACVsD,SA/DK,SAACtD,GACrB,IAAMyB,EAAM,IAAIC,KAAK1B,GACd2B,EAAM,IAAID,KAAKD,EAAIgC,cAAgB,KAAOhC,EAAIiC,WAAa,GAAK,IAAMjC,EAAIkC,WAC1E9B,EAAM,IAAIH,KACVI,EAAM,IAAIJ,KAAKG,EAAI4B,cAAgB,KAAO5B,EAAI6B,WAAa,GAAK,IAAM7B,EAAI8B,WAC5EC,EAAe7B,KAAKC,MAAOL,EAAMG,GAAlB,MACM8B,EAAL,GAAhBA,EAAoC,cAC/BA,EAAe,EAAoB7B,KAAKE,KAAK2B,GAAgB,eAC5C,GAAjBA,EAAqC,YACrCA,GAAgB,EAAoB7B,KAAKE,KAAKF,KAAKG,IAAI0B,IAAiB,YAC3D,QACtBtB,EAAQX,GACRa,EAAYoB,UAuDF,6BAEA,uBAAOT,KAAK,OACVC,UAAQ,EACR9B,UAAU,eACV+B,MAAOnD,EACPoD,SA1DW,SAACV,GACxBL,EAAYK,EAAEW,OAAOF,YA4DX,6BAEE,uBAAOF,KAAK,SAASE,MAAM,YAAY/B,UAAU,mCCDpDuC,EAtGI,WAAO,IAAD,EAEevE,mBAAS,IAFxB,mBAEhBQ,EAFgB,KAEHuC,EAFG,OAGC/C,mBAAS,IAAIoC,MAHd,mBAGhB1B,EAHgB,KAGVsC,EAHU,OAIShD,mBAAS,QAJlB,mBAIhBY,EAJgB,KAINqC,EAJM,OAKSjD,mBAAS,SALlB,mBAKhBS,EALgB,KAKNyC,EALM,KAmDrB,OACM,8BACA,sBAAME,MAAM,UAAUC,SAtBb,SAACC,GACdA,EAAEC,iBAEF,IAAMhD,EAAO,CACXC,YAAaA,EACbE,KAAMA,EACNE,SAAUA,GAGZT,QAAQC,IAAI,wBAA0BG,EAAKG,MAE3CQ,IAAMsC,KAAK,aAAcjD,GACtBa,MAAK,SAAAC,GAAG,OAAIlB,QAAQC,IAAIiB,EAAIC,SAC5BQ,OAAM,SAAAC,GACL5B,QAAQC,IAAI2B,EAAIJ,SAAS8B,QAAQC,cAGrCC,OAAOC,SAAW,KAKd,SACE,gCACE,gCACA,+BACE,6BAEF,uBAAOC,KAAK,OACVC,UAAQ,EACR9B,UAAU,eACV+B,MAAOvD,EACPwD,SAvDc,SAACV,GACzBP,EAAeO,EAAEW,OAAOF,YAyDlB,6BAEE,qBAAK/B,UAAU,eAAf,SACGvB,GAAsB,YAG3B,6BAEE,8BACE,cAAC,IAAD,CACEyD,SAAUxD,EACVsD,SAAU,SAAAtD,GAAI,OAjET,SAACA,GAClB,IAAMyB,EAAM,IAAIC,KAAK1B,GACf2B,EAAM,IAAID,KAAKD,EAAIgC,cAAgB,KAAOhC,EAAIiC,WAAa,GAAK,IAAMjC,EAAIkC,WAC1E9B,EAAM,IAAIH,KACVI,EAAM,IAAIJ,KAAKG,EAAI4B,cAAgB,KAAO5B,EAAI6B,WAAa,GAAK,IAAM7B,EAAI8B,WAC5EC,EAAe7B,KAAKC,MAAOL,EAAMG,GAAlB,MACM8B,EAAL,GAAhBA,EAAoC,cAC/BA,EAAe,EAAoB7B,KAAKE,KAAK2B,GAAgB,eAC5C,GAAjBA,EAAqC,YACrCA,GAAgB,EAAoB7B,KAAKE,KAAKF,KAAKG,IAAI0B,IAAiB,YAC3D,QACtBtB,EAAQX,GACRa,EAAYoB,GAqDkBE,CAAa9D,UAIrC,6BAEE,uBAAOmD,KAAK,OACVC,UAAQ,EACR9B,UAAU,eACV+B,MAAOnD,EACPoD,SA5DW,SAACV,GACtBL,EAAYK,EAAEW,OAAOF,YA8Df,6BAEE,uBAAOF,KAAK,SAASE,MAAM,MAAM/B,UAAU,kCCrE1CyC,MAlBf,WACE,OACE,qBAAKzC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,IAAD,CAAO0C,KAAK,IAAIC,OAAK,EAACC,UAAW7E,IACjC,cAAC,IAAD,CAAO2E,KAAK,YAAYE,UAAW9B,cCR3B+B,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlE,MAAK,SAAAmE,GACjCA,EAAaC,iB","file":"static/js/main.caac8867.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nlet dash = require('lodash');\n\nconst TasksList = () => {\n\n    const [tasks, setTasks] = useState({tasks: []});\n\n    console.log(tasks)\n\n    const Task = props => (\n      <tr>\n        <td>{props.task.description}</td>\n        <td>{props.distance}</td>\n        <td>{props.task.date.substring(0,10)}</td>\n        <td>{props.task.category}</td>\n        <td>\n          <Link to={`/edit/`+props.task._id}>edit</Link> <button onClick={() => { props.deleteTask(props.task._id)}}>delete</button>\n        </td>\n      </tr>\n    )\n\n    const deleteTask = (id) => {\n          axios.delete('/tasks/'+id)\n            .then(res => console.log(res.data));\n          setTasks({tasks: tasks.tasks.filter(el => el._id !== id)})\n        }\n\n    const theList = () => {\n      return tasks.tasks.map(currenttask => {\n          const dt2 = new Date(currenttask.date);\n          const d2F = new Date(dt2.toDateString())\n          console.log('d2F ', d2F)\n          const dt1 = new Date();\n          console.log('dt1 ', dt1)\n          const d1F = new Date(dt1.toDateString())\n          console.log('d1F ', d1F)\n          let distance = Math.floor((d2F - d1F)) / (1000 * 60 * 60 * 24);\n          console.log('Math.floor(d2F-d1F) ', Math.floor((d2F - d1F)))\n          console.log('distance ', distance)\n          if (distance == 1) { distance = '1 day until'}\n          else if (distance > 1) { distance = Math.ceil(distance) + ' days until'}\n          else if (distance == -1) { distance = '1 day ago'}\n          else if (distance < -1) { distance = Math.ceil(Math.abs(distance)) + ' days ago'}\n          else { \n              distance = 'today'\n            }\n          return <Task task={currenttask} deleteTask={deleteTask} key={currenttask._id} distance={distance}/>;\n        })\n    }\n\n    useEffect(() => {\n      axios.get('/tasks/')\n        .then(response => {\n          const orderedTasks = dash.orderBy(response.data, ['date'], 'asc')\n          setTasks({tasks: orderedTasks})\n        })\n        .catch((err) => {\n          console.log(err);\n        })\n    }, []);\n\n        return (\n          <div className='tableWrapper'>\n            <table className='table'>\n              <thead className='thead-dark'>\n                <tr> \n                  <th>Description</th>\n                  <th>Distance</th>\n                  <th>Date</th>\n                  <th>Category</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                { theList() }\n              </tbody>\n            </table>\n          </div>\n        )\n}\n\nexport default TasksList;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => (\n  <nav className='navbar navbar-dark bg-dark navbar-expand-lg'>\n      <Link to='/' className='navbar-brand'>fl0h</Link>\n      <div className='collapse navbar-collapse'>\n          <ul className='navbar-nav mr-auto'>\n          </ul>\n      </div>\n  </nav>\n);\n\nexport default Navbar;","import React, { Component, useState, useEffect } from 'react';\nimport ReactDOM from \"react-dom\";\nimport {useParams} from \"react-router-dom\";\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst EditTask = () => {\n\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState(new Date());\n  const [category, setCategory] = useState('None');\n  const [distance, setDistance] = useState('today');\n  const { id } = useParams();\n\n  useEffect(() => {\n    axios.get(`/tasks/`+id)\n    .then(response => {\n      setDescription(response.data.description);\n      setDate(new Date(response.data.date))\n      setCategory(response.data.category)\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }, []);\n\n    const onChangeDescription = (e) => {\n      setDescription(e.target.value)\n    };\n\n    const onChangeDate = (date) => {\n     const dt2 = new Date(date);\n      const d2F = new Date(dt2.getFullYear() + '-' + (dt2.getMonth() + 1) + '-' + dt2.getDate())\n      const dt1 = new Date();\n      const d1F = new Date(dt1.getFullYear() + '-' + (dt1.getMonth() + 1) + '-' + dt1.getDate())\n      let currdistance = Math.floor((d2F - d1F)) / (1000 * 60 * 60 * 24);\n      if (currdistance == 1) { currdistance = '1 day until'}\n      else if (currdistance > 1) { currdistance = Math.ceil(currdistance) + ' days until'}\n      else if (currdistance == -1) { currdistance = '1 day ago'}\n      else if (currdistance < -1) { currdistance = Math.ceil(Math.abs(currdistance)) + ' days ago'}\n      else { currdistance = 'today'}\n      setDate(d2F);\n      setDistance(currdistance);\n    }\n\n    const onChangeCategory = (e) => {\n      setCategory(e.target.value)\n    }\n\n    const onSubmit = (e) => {\n      e.preventDefault();\n\n      const task = {\n        description: description,\n        date: date,\n        category: category\n      }\n\n      axios.post('/tasks/update/'+id, task)\n        .then(res => console.log(res.data))\n        .catch(err => {\n          console.log(err.response.request._response);\n        });\n\n      window.location = '/';\n    }\n\n    return (\n      <div>\n        <form class=\"newTask\" onSubmit={onSubmit}>\n          <table>\n            <tbody>\n              <tr>\n                <td>\n                  {/* Description */}\n                  <input type='text'\n                  required\n                  className='form-control'\n                  value={description}\n                  onChange={onChangeDescription}\n                  />\n                </td>\n                <td>\n                {/* Distance */}\n                  <div className='form-control'>\n                    {distance ? distance : \"today\"}\n                  </div>\n                </td>\n                <td>\n                {/* Date */}\n                <div>\n                  <DatePicker\n                    selected={date}\n                    onChange={onChangeDate}\n                    />\n                </div>\n                </td>\n                <td>\n                {/* Category */}\n                <input type='text'\n                  required\n                  className='form-control'\n                  value={category}\n                  onChange={onChangeCategory}\n                  />\n                </td>\n                <td>\n                  {/* Actions */}\n                  <input type='submit' value='Edit Task' className='btn btn-primary' />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </form>\n      </div>\n    )\n}\n\nexport default EditTask;","import React, { Component, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst CreateTask = () => {\n\n  const [description, setDescription] = useState('');\n  const [date, setDate] = useState(new Date());\n  const [category, setCategory] = useState('None');\n  const [distance, setDistance] = useState('today');\n\n\n  const onChangeDescription = (e) => {\n      setDescription(e.target.value)\n    };\n\n  const onChangeDate = (date) => {\n      const dt2 = new Date(date);\n      const d2F = new Date(dt2.getFullYear() + '-' + (dt2.getMonth() + 1) + '-' + dt2.getDate())\n      const dt1 = new Date();\n      const d1F = new Date(dt1.getFullYear() + '-' + (dt1.getMonth() + 1) + '-' + dt1.getDate())\n      let currdistance = Math.floor((d2F - d1F)) / (1000 * 60 * 60 * 24);\n      if (currdistance == 1) { currdistance = '1 day until'}\n      else if (currdistance > 1) { currdistance = Math.ceil(currdistance) + ' days until'}\n      else if (currdistance == -1) { currdistance = '1 day ago'}\n      else if (currdistance < -1) { currdistance = Math.ceil(Math.abs(currdistance)) + ' days ago'}\n      else { currdistance = 'today'}\n      setDate(d2F);\n      setDistance(currdistance);\n    };\n\n  const onChangeCategory = (e) => {\n      setCategory(e.target.value)\n    };\n\n  const onSubmit = (e) => {\n      e.preventDefault();\n\n      const task = {\n        description: description,\n        date: date,\n        category: category\n      }\n\n      console.log('task date on submit: ' + task.date)\n\n      axios.post('/tasks/add', task)\n        .then(res => console.log(res.data))\n        .catch(err => {\n          console.log(err.response.request._response);\n        });\n\n      window.location = '/';\n    }\n\n    return (\n          <div>\n          <form class=\"newTask\" onSubmit={onSubmit}>\n            <table>\n              <tbody>\n              <tr>\n                <td>\n            {/* Description */}\n              <input type='text'\n                required\n                className='form-control'\n                value={description}\n                onChange={onChangeDescription}\n                />\n            </td>\n            <td>\n            {/* Distance */}\n              <div className='form-control'>\n                {distance ? distance : \"today\"}\n              </div>\n            </td>\n            <td>\n            {/* Date */}\n              <div>\n                <DatePicker\n                  selected={date}\n                  onChange={date => onChangeDate(date)}\n                  />\n              </div>\n            </td>\n            <td>\n            {/* Category */}\n              <input type='text'\n                required\n                className='form-control'\n                value={category}\n                onChange={onChangeCategory}\n                />\n            </td>\n            <td>\n            {/* Actions */}\n              <input type='submit' value='add' className='btn btn-primary' />\n            </td>\n            </tr>\n            </tbody>\n            </table>\n          </form>\n        </div>\n    )\n}\n\nexport default CreateTask;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './style.css';\n\nimport TasksList from './Components/tasks-list.component';\nimport Navbar from './Components/navbar.component';\nimport EditTask from './Components/edit-task.component';\nimport CreateTask from './Components/new-create-task.component';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Router>\n          <div className='container'>\n            <Navbar />\n            <CreateTask />\n            <Route path='/' exact component={TasksList} />\n            <Route path='/edit/:id' component={EditTask} />\n            </div>\n        </Router>\n      </header>\n    </div>\n  );\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}